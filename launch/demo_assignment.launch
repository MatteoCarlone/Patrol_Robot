<?xml version="1.0"?>

<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find moveit_ass)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we won't load or override the robot_description -->
  <arg name="load_robot_description" default="false"/>

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt's "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />

  <!-- Gazebo specific options -->
  <arg name="gazebo_gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- By default, use the urdf location provided from the package -->
  <arg name="urdf_path" default="$(find patrol_robot)/urdf/robot_moveit.urdf"/>

  <!-- launch the gazebo simulator and spawn the robot -->
  <include file="$(find patrol_robot)/launch/spawn.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="urdf_path" value="$(arg urdf_path)"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find moveit_ass)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <include file="$(find patrol_robot)/launch/run.launch">
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node  
  <include file="$(find moveit_ass)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find moveit_ass)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include> -->


  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find moveit_ass)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

  <node pkg="patrol_robot" type="moveit_node" name="moveit_node" required="true"/>

  <node pkg="patrol_robot" type="marker_server" name="marker_server" required="true"/>

  <node pkg="aruco_ros" type="aruco_detector" name="aruco_detector" args="image:=/camera/rgb/image_raw" required="true"/>

  <!-- Node to see the output
  <node pkg="image_view" type="image_view" name="image_view" args="image:=/camera/rgb/image_raw" required="true"/> -->

  <!-- Start Mapper to genreate map from laser scans 
  <rosparam file="$(find patrol_robot)/param/ros.yaml"/>
  <node name="Mapper" pkg="nav2d_karto" type="mapper" output="screen">
    <rosparam file="$(find patrol_robot)/param/mapper.yaml"/>
  </node> -->

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find patrol_robot)/config/my_sim.rviz" />

  <!-- <node name="rviz" pkg="rviz" type="rviz"/> -->

  <include file="$(find patrol_robot)/launch/simulation_gmapping.launch" /> 
  
  <include file="$(find patrol_robot)/launch/move_base.launch" /> 
  
  
  
</launch>